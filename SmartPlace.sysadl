Model SysADLModel ;  package  SmartPlaceCPD { import SmartPlacePTD ; import SmartPlaceVLD ;
	component def CPInterfaceUsuario { ports : desired : CTemperaturaOPT ; } boundary
	component def CPSensorPresenca { ports : detectedSensor : SensorPresencaOPT ; } boundary
	component def CPSensorTemperatura { ports : current : CTemperaturaOPT ; }
	component def CPMonitorTemperatura { }
	component def CPVerificarPresenca { }
	component def CPControlador { }
	component def ControleTemperaturaAmbiente {  ports : localTemp : CTemperaturaIPT ; detectedSensor : SensorPresencaIPT ; detectedCam : CameraPresencaIPT ; airController : ArComandoIPT ; lampController : LampadaComandoIPT ;  configuration { components : CPSensorTemperatura : CPSensorTemperatura { using ports : current : CTemperaturaOPT ; } CPSensorPresenca : CPSensorPresenca { using ports : detectedSensor : SensorPresencaOPT ; } CPVerificarPresenca : CPVerificarPresenca ; CPCamera : CPCamera { using ports : detectedCam : CameraPresencaOPT ; } CPArCondicionado : CPArCondicionado { using ports : airController : ArComandoOPT ; } CPInterfaceUsuario : CPInterfaceUsuario { using ports : desired : CTemperaturaOPT ; } CPLampada : CPLampada { using ports : lampController : LampadaComandoOPT ; } CPMonitorTemperatura : CPMonitorTemperatura ; CPControlador : CPControlador ; } }
	component def CPArCondicionado { ports : airController : ArComandoOPT ; } component def CPCamera { ports : detectedCam : CameraPresencaOPT ; } component def CPLampada { ports : lampController : LampadaComandoOPT ; } activity def ControladorSistemaAC ( presencaAr : Boolean ) ( presencaLamp : Boolean ) : ( ArComando : ArCondicionadoComando , LampComando : LampadaComando ) { body { actions : VerificarPresencaArAN : VerificarPresencaArAN { using pins : presencaAr : Boolean ; } VerificarPresencaLampAN : VerificarPresencaLampAN { using pins : presenca : Boolean ; } delegate presencaAr to presencaAr delegate ArComando to VerificarPresencaArAN delegate presencaLamp to presenca delegate LampComando to VerificarPresencaLampAN } } action def VerificarPresencaArAN ( presencaAr : Boolean ) : ArCondicionadoComando { constraint : post-condition VerificarPresencaArEQ delegate presencaAr to presencaAr delegate VerificarPresencaArAN to ArComando } action def VerificarPresencaLampAN ( presencaLamp : Boolean ) : LampadaComando { constraint : post-condition VerificarPresencaLampEQ delegate presencaLamp to presencaLamp delegate VerificarPresencaLampAN to LampComando } 
	constraint VerificarPresencaArEQ ( presencaAr : Boolean , temperaturaSensor : TemperaturaCelsius , temperaturaDesejada : TemperaturaCelsius ) : ( ArComando : ArCondicionadoComando ) {
		equation = (presencaAr == true & temperaturaSensor < temperaturaDesejada) ?
		(ArComando == ArCondicionadoComando::ON) :
		(ArComando == ArCondicionadoComando::OFF)
	} constraint VerificarPresencaLampEQ ( presencaLamp : Boolean ) : ( LampComando : LampadaComando ) {
		equation = (presencaLamp == true) ?
		(LampComando == LampadaComando::ON) :
		(LampComando == LampadaComando::OFF)
	} } Requirement RFControleTemperaturaAmbiente ( 1 ) { text = "o sistema deve ser capaz de manter a temperatura do ambiente" satisfied by SmartPlaceCPD.ControleTemperaturaAmbiente ; Requirement RFControleArCondicionado ( 4 ) { text = "O sistema deve definir comandos apropriados para ligar ou desligar ar condicionado para aumentar ou diminuir a temperatura" satisfied by SmartPlaceCPD.CPControlador ; } Requirement RFMonitorTemperatura ( 2 ) { text = "o sistema deve receber dados dos sensores de temperatura locais e calcular a temperatura media to ambiente" } Requirement RFDefinirTemperatura ( 10 ) { text = "O sistema deve definir a temperatura alvo considerando a presenca do usuario e a temperatura desejada" } Requirement RFControleLampadas ( 7 ) { text = "O sistema deve definir comandos apropriados para ligar e desligar as lampadas" } } Requirement RFObterTemperaturaLocal ( 3 ) { text = "o sistema deve usar os sensores para obter a temperatura ambiente" satisfied by SmartPlaceCPD.CPSensorTemperatura ; derive RFControleTemperaturaAmbiente.RFMonitorTemperatura ; } Requirement AumentarTemperatura ( 5 ) { text = "O sistema deve desligar o ar condicionado para aumentar a temperatura" satisfied by SmartPlaceCPD.CPArCondicionado ; derive RFControleTemperaturaAmbiente.RFControleArCondicionado ; } Requirement DiminuirTemperatura ( 6 ) { text = "O sistema deve ligar o ar condicionado para diminuir a temperatura" satisfied by SmartPlaceCPD.CPArCondicionado ; derive RFControleTemperaturaAmbiente.RFControleArCondicionado ; } Requirement RFVerificarPresenca ( 12 ) { text = "O sistema deve receber dados do sensor de presenca e das cameras para verificar se tem alguem no ambiente" satisfied by SmartPlaceCPD.CPSensorPresenca , SmartPlaceCPD.CPCamera ; derive RFControleTemperaturaAmbiente.RFDefinirTemperatura ; } Requirement RFDecidirTemperaturaAlvo ( 13 ) { text = "O sistema deve manter a temperatura desejada se houver alguem no ambiente, deve definir a temperatura para 22 Celsius quando ninguem na sala" satisfied by SmartPlaceCPD.CPVerificarPresenca , SmartPlaceCPD.CPMonitorTemperatura ; derive RFControleTemperaturaAmbiente.RFDefinirTemperatura ; }  Requirement RFDefinirTemperaturaDesejada ( 11 ) { text = "O sistema deve permitir que o usuário defina a temperatura desejada em Celsius" satisfied by SmartPlaceCPD.CPInterfaceUsuario ; derive RFControleTemperaturaAmbiente.RFDefinirTemperatura ; } Requirement LigarLampada ( 8 ) { text = "O sistema deve ligar as lâmpadas quando houver alguem no ambiente" satisfied by SmartPlaceCPD.CPLampada ; derive RFControleTemperaturaAmbiente.RFControleLampadas ; } Requirement DesligarLampada ( 9 ) { text = "O sistema deve desligar a lâmpada quando não houver alguem no ambiente" satisfied by SmartPlaceCPD.CPLampada ; derive RFControleTemperaturaAmbiente.RFControleLampadas ; } package SmartPlaceDUD { dimension Temperatura unit Celsius { dimension = Temperatura } } package SmartPlaceVLD { enum ArCondicionadoComando { ON , OFF } enum LampadaComando { ON , OFF } value type Boolean { } value type Real { } value type String { } value type Int { } value type Void { } value type Temperatura { dimension = SmartPlaceDUD.Temperatura } value type TemperaturaCelsius extends Temperatura { unit = SmartPlaceDUD.Celsius dimension = SmartPlaceDUD.Temperatura } datatype ArCond { attributes : arCond : ArCondicionadoComando ; } datatype Lampada { attributes : lampada : LampadaComando ; } } package SmartPlacePTD { import SmartPlaceVLD ; port def CTemperaturaOPT { flow out TemperaturaCelsius } port def ArComandoIPT { flow in ArCondicionadoComando } port def ArComandoOPT { flow out ArCondicionadoComando } port def LampadaComandoIPT { flow in LampadaComando } port def LampadaComandoOPT { flow out LampadaComando } port def SensorPresencaIPT { flow in Boolean } port def SensorPresencaOPT { flow out Boolean } port def CTemperaturaIPT { flow in TemperaturaCelsius } port def CameraPresencaIPT { flow in Boolean } port def CameraPresencaOPT { flow in Boolean } } package SmartPlaceCND { import SmartPlacePTD ; connector def LampadaCommandosCN { participants : ~ lampCommandsIPT : LampadaComandoIPT ; ~ lampCommandsOPT : LampadaComandoOPT ; flows : LampadaComando from lampCommandsIPT to lampCommandsOPT } connector def CTemperaturaCN { participants : ~ CTemperaturaIPT : CTemperaturaIPT ; ~ CTemperatura : CTemperaturaOPT ; flows : TemperaturaCelsius from CTemperaturaIPT to CTemperatura } connector def SensorPresencaCN { participants : ~ SensorPresencaIPT : SensorPresencaIPT ; ~ SensorPresencaOPT : SensorPresencaOPT ; flows : Boolean from SensorPresencaIPT to SensorPresencaOPT } connector def ArCondComandosCN { participants : ~ ArCondComandoIPT : ArComandoIPT ; ~ ArCondComandoOPT : ArComandoOPT ; flows : ArCondicionadoComando from ArCondComandoIPT to ArCondComandoOPT } connector def CameraPresencaCN { participants : ~ cameraPresencaIPT : CameraPresencaIPT ; ~ CameraPresencaOPT : CameraPresencaOPT ; flows : Boolean from cameraPresencaIPT to CameraPresencaOPT } }